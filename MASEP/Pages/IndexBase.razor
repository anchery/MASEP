@using System.Collections
@inject SqliteDataAccess _db
@inject AuthenticationStateProvider _auth
@inject NavigationManager _nav
@inject IJSRuntime JsRuntime;

@code {
    protected List<MetaItemModel> lstGender;
    protected List<MetaItemModel> lstRace;
    protected List<MetaItemModel> lstMaritalStat;
    protected List<MetaItemModel> lstIncome;
    protected List<MetaItemModel> lstEducation;
    protected List<MetaItemModel> lstEmpStat;
    protected string age = string.Empty;
    protected DateTime dob; //= DateTime.Today.ToString("yyyy-MM-dd");
    protected string maxdate = DateTime.Today.ToString("yyyy-MM-dd");
    protected string trafficTickets = string.Empty;
    protected Dictionary<string,int>drugs = new Dictionary<string, int>();
    private List<ObservationModel> obsItems;
    protected List<ResponseModel> resp=new List<ResponseModel>();
    protected AssessmentModel newObs = new AssessmentModel();
    protected List<ObservationViewModel> ObsList = new List<ObservationViewModel>();

    protected List<MetaItemModel> lstHowmany72 = new List<MetaItemModel>()
    {
        new MetaItemModel { ItemId=0, ItemText = "0"},
        new MetaItemModel { ItemId=1, ItemText = "1"},
        new MetaItemModel { ItemId=2, ItemText = "2"},
        new MetaItemModel { ItemId=3, ItemText = "3"},
        new MetaItemModel { ItemId=4, ItemText = "4"},
        new MetaItemModel { ItemId=5, ItemText = "5+"}
    };
    protected List<MetaItemModel> lstHowmany73 = new List<MetaItemModel>()
    {
        new MetaItemModel { ItemId=0, ItemText = "0"},
        new MetaItemModel { ItemId=1, ItemText = "1"},
        new MetaItemModel { ItemId=2, ItemText = "2"},
        new MetaItemModel { ItemId=3, ItemText = "3"},
        new MetaItemModel { ItemId=4, ItemText = "4"},
        new MetaItemModel { ItemId=5, ItemText = "5"},
        new MetaItemModel { ItemId=6, ItemText = "6"},
        new MetaItemModel { ItemId=7, ItemText = "7"},
        new MetaItemModel { ItemId=8, ItemText = "8 or more"}
    };
    protected List<ResponseTypeModel> lstRespYN = new List<ResponseTypeModel>()
    {
            new ResponseTypeModel {ResponseId=1,ResponseText="Y"},
            new ResponseTypeModel {ResponseId=2,ResponseText="N"}
    };
    protected List<ResponseTypeModel> lstResp05 = new List<ResponseTypeModel>()
    {
            new ResponseTypeModel {ResponseId=0,ResponseText="0"},
            new ResponseTypeModel {ResponseId=1,ResponseText="1"},
            new ResponseTypeModel {ResponseId=2,ResponseText="2"},
            new ResponseTypeModel {ResponseId=3,ResponseText="3"},
            new ResponseTypeModel {ResponseId=4,ResponseText="4"},
            new ResponseTypeModel {ResponseId=5,ResponseText="5+"},
    };

    protected List<MetaItemModel> lstDrugs74 = new List<MetaItemModel>()
    {
            new MetaItemModel {ItemId=0,ItemText="Prescription pain medication"},
            new MetaItemModel {ItemId=1,ItemText="Prescription medicine for anxiety, sleep problems, or depression"},
            new MetaItemModel {ItemId=2,ItemText="Other medicine with a warning label about driving or operating heavy machinery"},
            new MetaItemModel {ItemId=3,ItemText="Marijuana"},
            new MetaItemModel {ItemId=4,ItemText="Other illegal drugs, such as cocaine..."}
    };
    protected List<MetaItemModel> lstDrugs75 = new List<MetaItemModel>()
    {
            new MetaItemModel {ItemId=0,ItemText="Alcohol"},
            new MetaItemModel {ItemId=1,ItemText="Prescription pain medication"},
            new MetaItemModel {ItemId=2,ItemText="Prescription medicine for anxiety, sleep problems, or depression"},
            new MetaItemModel {ItemId=3,ItemText="Other medicine with a warning label about driving or operating heavy machinery"},
            new MetaItemModel {ItemId=4,ItemText="Marijuana"},
            new MetaItemModel {ItemId=5,ItemText="Other illegal drugs, such as cocaine..."},
            new MetaItemModel {ItemId=6,ItemText="None, not even alcohol"},
    };
    protected List<MetaItemModel> lstFreq1 = new List<MetaItemModel>()
    {
            new MetaItemModel {ItemId=0,ItemText="Everyday"},
            new MetaItemModel {ItemId=1,ItemText="Nearly Everyday"},
            new MetaItemModel {ItemId=2,ItemText="3-4 days per week"},
            new MetaItemModel {ItemId=3,ItemText="1-2 days per week"},
            new MetaItemModel {ItemId=4,ItemText="1-3 days per month"},
            new MetaItemModel {ItemId=5,ItemText="Zero/No use"}
    };

    protected void SelectionChanged(DictionaryEntry val)
    {
        string response = val.Value.ToString();
        switch (val.Key.ToString().Substring(0,20))
        {
            case "Gender":
                newObs.Gender = response;
                break;
            case "Race":
                newObs.Race = response;
                break;
            case "Marital":
                newObs.MaritalStat = response;
                break;
            case "Household Income":
                newObs.Income = response;
                break;
            case "Highest Level of Education":
                newObs.Education = response;
                break;
            case "Employment Status":
                newObs.EmpStat = response;
                break;
            case "How many traffic":
                trafficTickets = response;
                break;
            case "Prescription pain me":
            case "Prescription medicin":
                drugs[val.Key.ToString()]=(int)val.Value;
                break;
        }
    }

    protected void DOBChanged(ChangeEventArgs args)
    {
        //DateTime date1 = new DateTime(newObs.DOB.Year, newObs.DOB.Month, newObs.DOB.Day);
        try
        {
            DateTime newDOB;
            DateTime.TryParse(args.Value.ToString(), out dob);
            //DateTime date2 = ;

            age = (DateTime.Today.Year - dob.Year).ToString();
            //Console.WriteLine(age);
            Console.WriteLine(age);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);

        }

    }

    protected async void SaveData()
    {
        try
        {
            //confirm - TODO test it on mobile
            bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");

            if (confirmed)
            {
                //Save context items
                MasterModel model = new MasterModel();

                string serialNo = DateTime.Now.ToString("yyyyMMddHHmmss");
                model.SerialNo = serialNo;

                model.Username = ((AuthStateProvider)_auth).Username;
                model.AssessmentDate = DateTime.Now;

                if (newObs.Gender != null)
                    model.Gender = newObs.Gender;

                if (newObs.Race != null)
                    model.Race = newObs.Race;

                if (newObs.MaritalStat != null)
                    model.Marital = newObs.MaritalStat;

                if (newObs.Income != null)
                    model.Income = newObs.Income;

                if (dob.ToString() != "1/1/0001 12:00:00 AM")
                    model.DOB = dob.ToString();

                if (age != string.Empty)
                    model.Age = age;

                if (newObs.Education != null)
                    model.Education = newObs.Education;

                if (newObs.EmpStat != null)
                    model.Employment = newObs.EmpStat;

                string sql = @"Insert Into OBS_Master (SerialNo,Username,AssessmentDate,Gender,Race,Marital,Income,DOB,Age,Education,Employment)" +
                            " Values(@SerialNo,@Username,@AssessmentDate,@Gender,@Race,@Marital,@Income,@DOB,@Age,@Education,@Employment)";

                var result = _db.SaveData(sql, model);

                if (result == 1)
                {
                    //Save observations
                    //foreach r in resp


                    //if success, reset model
                    newObs = new AssessmentModel();

                    //Logout
                    ((AuthStateProvider)_auth).LogoutUser();
                    _nav.NavigateTo("/logout");
                }

                Console.WriteLine("");
            }

        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    protected void ClearAll()
    {
        age = "";
        newObs = new AssessmentModel();
    }

    protected async void LoadMetaItems()
    {
        lstGender = await _db.LoadMetaItems<MetaItemModel>("Gender");
        lstRace = await _db.LoadMetaItems<MetaItemModel>("Race");
        lstMaritalStat = await _db.LoadMetaItems<MetaItemModel>("Marital");
        lstIncome = await _db.LoadMetaItems<MetaItemModel>("Income");
        lstEducation = await _db.LoadMetaItems<MetaItemModel>("Education");
        lstEmpStat = await _db.LoadMetaItems<MetaItemModel>("Employment");
    }

    protected async void LoadMetaObservations()
    {
        try
        {
            ObservationViewModel ovm;
            //grp1
            obsItems = await _db.LoadMetaObservations("1");
            ovm = new ObservationViewModel();
            ovm.GrpId = 1;
            ovm.GrpText = "";
            ovm.observations = obsItems;
            ovm.responseTypes = lstRespYN;
            ObsList.Add(ovm);
            //grp2
            obsItems = await _db.LoadMetaObservations("2");
            ovm = new ObservationViewModel();
            ovm.GrpId = 2;
            ovm.GrpText = "";
            ovm.observations = obsItems;
            ovm.responseTypes = lstResp05;
            ObsList.Add(ovm);
        }
        catch (Exception e)
        {
            throw new Exception(e.Message);
        }
    }

    protected override void OnInitialized()
    {
        LoadMetaItems();
        LoadMetaObservations();
    }

}
