@using System.Collections
@inject SqliteDataAccess _db

@code {
    protected AssessmentModel newObs = new AssessmentModel();
    protected List<MetaItemModel> lstGender;
    protected List<MetaItemModel> lstRace;
    protected List<MetaItemModel> lstMaritalStat;
    protected List<MetaItemModel> lstIncome;
    protected List<MetaItemModel> lstEducation;
    protected List<MetaItemModel> lstEmpStat;
    protected string age="";
    protected string maxdate = DateTime.Today.ToString("yyyy-MM-dd");
    //private List<ObservationGroupModel> ObsGroups;
    protected List<ObservationViewModel> ObsList = new List<ObservationViewModel>();
    private List<ObservationModel> obsItems;
    protected List<ResponseModel> resp = new List<ResponseModel>();
    private List<ResponseTypeModel> respType = new List<ResponseTypeModel>()
    {
            new ResponseTypeModel {ResponseId=1,ResponseText="Y"},
            new ResponseTypeModel {ResponseId=2,ResponseText="N"}
    };

    protected void SelectionChanged(DictionaryEntry val)
    {
        int response = int.Parse(val.Value.ToString());
        switch (val.Key.ToString())
        {
            case "Gender":
                newObs.Gender = response;
                break;
            case "Race":
                newObs.Race = response;
                break;
            case "Marital":
                newObs.MaritalStat = response;
                break;
            case "Household Income":
                newObs.Income = response;
                break;
            case "Highest Level of Education":
                newObs.Education = response;
                break;
            case "Employment Status":
                newObs.EmpStat = response;
                break;
        }
    }

    protected void DOBChanged()
    {
        //DateTime date1 = new DateTime(newObs.DOB.Year, newObs.DOB.Month, newObs.DOB.Day);
        try
        {
            DateTime date1 = newObs.DOB;
            DateTime date2 = DateTime.Today;
            age = (date2.Year - date1.Year).ToString();
            Console.WriteLine(age);
        }
        catch (Exception)
        {

            throw;
        }

    }

    protected void SaveData()
    {
        //Save context items
        //newObs.xxx
        //Save observations
        //foreach r in resp

        //TODO
        //if success, reset model
        //newObs = new AssessmentModel();
        //Logout??

        Console.WriteLine("");

    }
    protected async void LoadMetaItems()
    {
        //string sql = "Select * From Meta_Items where ItemType='Gender' order by SortOrder";
        //lstGender = await _db.LoadData<MetaItemModel, dynamic>(sql, new { });

        lstGender = await _db.LoadMetaItems<MetaItemModel>("Gender");
        lstRace = await _db.LoadMetaItems<MetaItemModel>("Race");
        lstMaritalStat = await _db.LoadMetaItems<MetaItemModel>("Marital");
        lstIncome = await _db.LoadMetaItems<MetaItemModel>("Income");
        lstEducation = await _db.LoadMetaItems<MetaItemModel>("Education");
        lstEmpStat = await _db.LoadMetaItems<MetaItemModel>("Employment");
    }
    protected async void LoadMetaObservations()
    {
        try
        {
            obsItems = await _db.LoadMetaObservations("1");
            ObservationViewModel ovm = new ObservationViewModel();
            ovm.GrpId = 1;
            ovm.GrpText = "";
            ovm.observations = obsItems;
            ovm.responseTypes = respType;
            ObsList.Add(ovm);
        }
        catch (Exception e)
        {
            throw new Exception(e.Message);
        }
    }

    protected override void OnInitialized()
    {
        LoadMetaItems();
        LoadMetaObservations();
    }
}
